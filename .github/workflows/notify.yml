name: Morning TimeTree

on:
  schedule:
    # TEMP: test every 5 minutes (UTC)
    - cron: "*/5 * * * *"
  workflow_dispatch:
    branches: [ main ]  # 手動実行。main ブランチに限定
    inputs:
      date:
        description: "任意の日付 (YYYY-MM-DD, JST)"
        required: false

permissions:
  contents: read

concurrency:
  group: morning-timetree
  cancel-in-progress: true

jobs:
  notify:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      TZ: Asia/Tokyo
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Export TimeTree ICS
        # 注意: timetree-exporter の CLI 引数はバージョンにより異なる場合があります。
        # 必要に応じてこのコマンドを --help を参考に調整してください。
        shell: bash
        env:
          TIMETREE_EMAIL: ${{ secrets.TIMETREE_EMAIL }}
          TIMETREE_PASSWORD: ${{ secrets.TIMETREE_PASSWORD }}
          TIMETREE_CALENDAR_CODE: ${{ secrets.TIMETREE_CALENDAR_CODE }}
          TIMETREE_CALENDAR_NUMBER: ${{ secrets.TIMETREE_CALENDAR_NUMBER }}
        run: |
          set -euo pipefail
          # Mask sensitive values just in case anything prints
          echo "::add-mask::${TIMETREE_EMAIL}"
          echo "::add-mask::${TIMETREE_PASSWORD}"
          echo "::add-mask::${TIMETREE_CALENDAR_CODE}"

          # timetree_exporter はカレンダー選択を対話で求める場合があるため、
          # まずコード指定で試行し、未生成なら番号選択（標準入力）でフォールバックします。
          # リトライ込みで最大2回ずつ試行
          for attempt in 1 2; do
            # 1) CLI 名が存在する場合はそのまま実行
            if command -v timetree-exporter >/dev/null 2>&1; then
              timetree-exporter -e "$TIMETREE_EMAIL" -c "$TIMETREE_CALENDAR_CODE" -o calendar.ics > /dev/null || true
              if [ -f calendar.ics ]; then break; fi
              if [ -n "${TIMETREE_CALENDAR_NUMBER:-}" ]; then
                printf '%s\n' "$TIMETREE_CALENDAR_NUMBER" | timetree-exporter -e "$TIMETREE_EMAIL" -o calendar.ics > /dev/null || true
                if [ -f calendar.ics ]; then break; fi
              fi
            fi
            # 2) module 実行（配布形態によりエントリーポイント名が異なるため）
            python -m timetree_exporter -e "$TIMETREE_EMAIL" -c "$TIMETREE_CALENDAR_CODE" -o calendar.ics > /dev/null || true
            if [ -f calendar.ics ]; then break; fi
            if [ -n "${TIMETREE_CALENDAR_NUMBER:-}" ]; then
              printf '%s\n' "$TIMETREE_CALENDAR_NUMBER" | python -m timetree_exporter -e "$TIMETREE_EMAIL" -o calendar.ics > /dev/null || true
              if [ -f calendar.ics ]; then break; fi
            fi
            sleep 3
          done
          if [ ! -f calendar.ics ]; then
            echo "calendar.ics が生成されませんでした。timetree-exporter のインストール/引数をご確認ください。" >&2
            exit 1
          fi

      - name: Send LINE notification
        shell: bash
        env:
          LINE_TOKEN: ${{ secrets.LINE_TOKEN }}
          LINE_CHANNEL_ACCESS_TOKEN: ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}
          LINE_USER_ID: ${{ secrets.LINE_USER_ID }}
          # 通知文の末尾に添える一言（任意）
          MESSAGE_NOTE: 今日も良い一日を！
        run: |
          set -euo pipefail
          # Mask LINE-related sensitive values
          if [ -n "${LINE_TOKEN:-}" ]; then echo "::add-mask::${LINE_TOKEN}"; fi
          if [ -n "${LINE_CHANNEL_ACCESS_TOKEN:-}" ]; then echo "::add-mask::${LINE_CHANNEL_ACCESS_TOKEN}"; fi
          if [ -n "${LINE_USER_ID:-}" ]; then echo "::add-mask::${LINE_USER_ID}"; fi
          DATE_OPT=""
          if [ -n "${{ github.event.inputs.date }}" ]; then
            DATE_OPT="--date ${{ github.event.inputs.date }}"
          fi
          # Prefer Messaging API when both secrets are present
          EXTRA="--line-mode notify"
          if [ -n "${LINE_CHANNEL_ACCESS_TOKEN:-}" ] && [ -n "${LINE_USER_ID:-}" ]; then
            EXTRA="--line-mode messaging --line-channel-access-token \"$LINE_CHANNEL_ACCESS_TOKEN\" --line-user-id \"$LINE_USER_ID\""
          fi
          python src/notify.py --ics calendar.ics $DATE_OPT $EXTRA

      - name: Cleanup ICS
        if: always()
        run: |
          rm -f calendar.ics || true
